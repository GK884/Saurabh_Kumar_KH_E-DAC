/*
database created with 'MINIOLX' name.
*/
CREATE DATABASE MINIOLX;

/*
using 'MINIOLX' DATABASE
*/
USE MINIOLX;

/*
CREATING TABLE NAMED 'PRODUCT'
WHICH HAS ATTRIBUTES SUCH AS
1. PRO_ID	: THE UNIQUE ID OF THE PRODUCT, IT IS A PRIMARY KEY.
2. ITEM_ID	: THE ID OF AN ITEM, IT IS A FOREIGN KEY.
3. PRO_NAME	: THE NAME OF THE PRODUCT.
4. MODEL_NO	: THE MODEL NUMBER OF THE PRODUCT.
5. TYPE_OF	: IS IT 'OLD' OR 'NEW'.
6. COMPANY	: WHICH IS COMPANY WHO MANUFACTURE IT.
7. PRICE	: COST OF THE PRICE.
8. STATUS	: IF 'AVAILABLE' OR 'UNAVAILABLE'.
9. USER_ID  : USER ID OF THE USERS WHO ARE SELLING THE ITEMS.
*/

CREATE TABLE PRODUCT
(
	PRO_ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    ITEM_ID VARCHAR(20),
    PRO_NAME VARCHAR(20),
    MODEL_NO VARCHAR(20),
    TYPE_OF VARCHAR(20),
    COMPANY VARCHAR(20),
    PRICE INTEGER(20),
    STATUS VARCHAR(20) DEFAULT 'AVAILABLE',
    CONSTRAINT FOREIGN KEY(ITEM_ID) REFERENCES ITEMS(ITEM_ID)
);

/* ************************************************************************************************** */

-- ALTER TABLE PRODUCT ADD COLUMN STATUS VARCHAR(20) DEFAULT 'AVAILABLE';


ALTER TABLE PRODUCT ADD CONSTRAINT FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID);


UPDATE PRODUCT SET USER_ID = 2 WHERE PRO_ID IN (2,5,7);


DESC PRODUCT;


SELECT * FROM PRODUCT;

/*
DATA HAS BEEN INSERTED INTO THE PRODUCT TABLE.
*/
INSERT INTO PRODUCT (ITEM_ID, PRO_NAME, MODEL_NO, TYPE_OF, COMPANY, PRICE) VALUES
('LAP01', 'LAPTOP', 'HP180TX', 'NEW', 'HP', 46000),
('LAP01', 'LAPTOP', 'HP2007', 'OLD', 'HP', 33000),
('MOB01', 'MOBILE', 'OP2015', 'NEW', 'ONEPLUS', 22000),
('MOB01', 'MOBILE', 'SS300S', 'OLD', 'SAMSUNG', 14000),
('BIK01', 'BIKE', 'RE01', 'OLD', 'ROYAL ENFIELD', 100000),
('BIK01', 'BIKE', 'SZ00Z', 'OLD', 'SUZUKI REVOLT', 22000),
('WM01', 'WASHING_MACHINE', 'WP700', 'NEW', 'WHIRLPOOL', 12000),
('WM01', 'WASHING_MACHINE', 'LG426', 'OLD', 'LG', 12000);

/* ************************************************************************************************** */

/*
CREATING TABLE NAMED 'ITEMS'
WHICH HAS ATTRIBUTES SUCH AS:
1. ITEM_ID : THE ID OF AN ITEM, IT IS A PRIMARY KEY.
2. ITEM_NAME : THE NAME OF THE ITEM SUCH AS 'LAPTOP', 'BIKE', ETC.
*/
CREATE TABLE ITEMS
(
	ITEM_ID VARCHAR(20) PRIMARY KEY,
    ITEM_NAME VARCHAR(20)
);

/*
INSERTING VALUES INTO TABLE 'ITEMS'.
*/
INSERT INTO ITEMS VALUES
('LAP01', 'LAPTOP'),
('MOB01', 'MOBILE'),
('BIK01', 'BIKE'),
('WM01', 'WASHING_MACHINE');

/* ************************************************************************************************** */

SELECT * FROM ITEMS;
SELECT * FROM PRODUCT;
SELECT * FROM USERS;
SELECT * FROM ORDERS;

/* ************************************************************************************************** */

/*
CREATING TABLE NAMED 'ORDERS'
WHICH HAS ATTRIBUTES SUCH AS:
1. PRO_ID	: THE ID OF AN PRODUCT, IT IS A PRIMARY KEY,  
			  WHICH IS A FOREIGN KEY REFERENCING TO 'USER_ID' OF TABLE PRODUCT
2. PRICE	: THE PRICE OF THE PRODUCT,
3. USER_ID	: THE ID OF THE USER, WHICH IS A FOREIGN KEY REFERENCING TO 'PRO_ID' OF TABLE PRODUCT.
*/
CREATE TABLE ORDERS
(
	PRO_ID INTEGER PRIMARY KEY,
    PRICE INTEGER,
    USER_ID INTEGER,
    constraint foreign key(USER_ID) references USERS(USER_ID),
    constraint foreign key(PRO_ID) references PRODUCT(PRO_ID)
);
/*
THIS IS AN EMPTY TABLE INITIALLY,
THE ORDERS WILL COME WHEN THE USER
WANTS TO BUY IT.
*/

ALTER TABLE ORDERS MODIFY COLUMN PRICE INTEGER(20);

/* ************************************************************************************************** */

/*
CREATING TABLE NAMED 'USERS'
WHICH HAS ATTRIBUTES SUCH AS:
1. USER_ID			: ID OF THE USERS, WHICH IS THE PRIMARY KEY
2. USER_NAME		: NAME OF THE USER.
3. USER_PASSWORD	: PASSWORD OF THE USER.
4. USER_EMAIL		: EMAIL ID OF THE USER.
5. USER_MOB_NO		: MOBILE NUMBER OF THE USER.
*/
CREATE TABLE USERS
(
	USER_ID INTEGER NOT NULL PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_PASSWORD VARCHAR(20) NOT NULL,
    USER_EMAIL VARCHAR(20) NOT NULL,
    USER_MOB_NO INTEGER(10)
);


/*
INSERTING VALUES INTO USERS TABLE.
*/
INSERT INTO USERS VALUES
(1, 'SAURABH', 'TIGER', 'SAURABH@GMAIL.COM', 8800841509);
INSERT INTO USERS VALUES
(2, 'MANOJ', 'CAT', 'MANOJ@GMAIL.COM', 8800841505);


/* ************************************************************************************************** */


/*
FUNCTION TO KNOW WHAT IS THE PRICE OF THE MODEL_NO
*/
DELIMITER $$
CREATE FUNCTION SHOW_PRICE (MOD_NO VARCHAR(30)) RETURNS INTEGER
BEGIN
	DECLARE PR INTEGER;
	SET PR = (SELECT PRICE FROM PRODUCT WHERE MODEL_NO = MOD_NO);
    RETURN PR;
END $$

SET @MOD_NO = 'HP180TX';

SELECT SHOW_PRICE(@MOD_NO);

/* ************************************************************************************************** */

/*
THIS PROCEDURE IS FOR ORDERING THE PRODUCT,
IT IS USED TO MAKE PRODUCT 'UNAVAILABLE' FROM
TABLE 'PRODUCT' INSERTING THE DATA INTO 
TABLE 'ORDERS'.
*/

DELIMITER $$
CREATE PROCEDURE MYNAME (IN PID INTEGER, IN UID INTEGER)
BEGIN
	DECLARE PPRICE INTEGER(20);
    SET PPRICE = (SELECT PRICE FROM PRODUCT WHERE PRO_ID = PID AND STATUS = 'AVAILABLE');
    INSERT INTO ORDERS VALUES
    (PID, PPRICE, UID);
    UPDATE PRODUCT SET STATUS = 'UNAVAILABLE' WHERE PRO_ID = PID;
END$$

CALL MYNAME(1,1);

TRUNCATE TABLE ORDERS;

/* ************************************************************************************************** */

/* PRINTING TABLES */
SELECT * FROM ITEMS;
SELECT * FROM USERS;
SELECT * FROM PRODUCT;
SELECT * FROM ORDERS;


DELETE FROM PRODUCT WHERE MODEL_NO = 'HPGREENTX';


UPDATE PRODUCT SET STATUS = 'AVAILABLE' WHERE MODEL_NO = 'HP180TX';


TRUNCATE TABLE ORDERS;

/* ************************************************************************************************** */

/*
THIS PROCEDURE IS INSERTING THE NEW OR OLD DATA INTO THE
'PRODUCT' TABLE, IF THE MODEL NO ALREADY EXITS, THE STATUS
IS CHANGED TO 'AVAILABLE' OTHERWISE THE NEW DATA IS BEING 
INSERTED INTO 'PRODUCT'.
*/
DELIMITER $$
CREATE PROCEDURE INSERTING(IN I_ID VARCHAR(20), IN P_NAME VARCHAR(20), IN MOD_NO VARCHAR(20),
IN T_OF VARCHAR(20), IN COMP VARCHAR(20), IN PRI VARCHAR(20), IN STA VARCHAR(20), IN UR_ID VARCHAR(30))
BEGIN
	DECLARE MODEL VARCHAR(20);
    SET MODEL = (SELECT COUNT(MODEL_NO) FROM PRODUCT WHERE MODEL_NO = MOD_NO);
    IF(MODEL < 1) THEN
		INSERT INTO PRODUCT (ITEM_ID, PRO_NAME, MODEL_NO, TYPE_OF, COMPANY, PRICE, STATUS, USER_ID) VALUES
        (I_ID, P_NAME, MOD_NO, T_OF, COMP, PRI, STA, UR_ID);
	ELSE 
		UPDATE PRODUCT SET STATUS = 'AVAILABLE' WHERE MODEL_NO = MOD_NO;
	END IF;
END $$


CALL INSERTING(@ONE, @TWO, @THREE, @FOUR, @FIVE, @SIX, @SEVEN, @EIGHT);
DECLARE ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT VARCHAR(20);
SET @ONE = 'LAP01';
SET @TWO = 'LAPTOPOP';
SET @THREE = 'HPGREENTX';
SET @FOUR = 'NEW';
SET @FIVE = 'HP';
SET @SIX = '46000';
SET @SEVEN = 'AVAILABLE';
SET @EIGHT = '2';

/* ************************************************************************************************** */

SELECT * FROM ITEMS;
SELECT * FROM USERS;
SELECT * FROM PRODUCT;
SELECT * FROM ORDERS;


/* ************************************************************************************************** */

/*
THIS PRODUCT IS TO ADD A NEW ITEM INTO THE 'ITEM'
TABLE.
*/

DELIMITER $$
CREATE PROCEDURE ADD_ITEM (IN I_ID VARCHAR(20), IN I_NAME VARCHAR(30))
BEGIN
	DECLARE GOTOHELL VARCHAR(20);
	SET GOTOHELL = (SELECT COUNT(ITEM_ID) FROM ITEMS WHERE ITEM_ID = I_ID);
	IF(I_ID > 1) THEN
		SELECT 'AREADY AVAILABLE';
	ELSE
		INSERT INTO ITEMS VALUES
        (I_ID, I_NAME);
    END IF;
END $$

DECLARE I_ID, I_NAME VARCHAR(30);
SET @I_ID = 'HO01';
SET @I_NAME = 'HOME00';
CALL ADD_ITEM(@I_ID, @I_NAME);


-- DELETE FROM ITEMS WHERE ITEM_ID = 'HO01';

SELECT * FROM ITEMS;
SELECT * FROM USERS;
SELECT * FROM PRODUCT;
SELECT * FROM ORDERS;

/*
THIS PROCEDURE IS TO SHOW ALL THE 'AVAILABLE' OR
'UNAVAILABLE' DATA FROM THE PRODUCT TABLE.
*/
DELIMITER $$
CREATE PROCEDURE VIEW_AVAILABLE (IN AVAIL VARCHAR(20))
BEGIN
	(SELECT ITEM_ID, PRO_NAME, MODEL_NO, STATUS FROM PRODUCT WHERE STATUS = AVAIL);
END $$

CALL VIEW_AVAILABLE('AVAILABLE');

CALL VIEW_AVAILABLE('UNAVAILABLE');

SELECT * FROM ITEMS;
SELECT * FROM USERS;
SELECT * FROM PRODUCT;
SELECT * FROM ORDERS;



/* ************************************************************************************************** */

/*
TO CHECK THE TOTAL NO OF PROFIT TAKEN BY THE USERS.
*/

DELIMITER $$
CREATE FUNCTION TOTAL_PROFIT(VAL INTEGER) RETURNS INTEGER
BEGIN
	DECLARE SOM INTEGER;
	SET SOM = (SELECT SUM(PRICE) FROM PRODUCT WHERE USER_ID = VAL AND STATUS = 'UNAVAILABLE');
    RETURN SOM;
END $$

SELECT TOTAL_PROFIT(1);


-- UPDATE PRODUCT SET STATUS = 'AVAILABLE' WHERE PRO_ID IN (3,4,8);


/* ************************************************************************************ */

/*
THIS PRODUCT IS MADE BY SAURABH KUMAR AND ANAND MISHRA
ROLL NO 200940381089 AND 200940381013
*/